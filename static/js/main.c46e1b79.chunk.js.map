{"version":3,"sources":["Navbar.js","BlogList.js","useFetch.js","Home.js","Create.js","BlogDetails.js","App.js","index.js"],"names":["Navbar","className","to","style","color","backgroundColor","borderRadius","BlogList","blogs","title","map","blog","id","author","useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","abortController","AbortController","setTimeout","fetch","signal","then","res","ok","Error","console","log","json","catch","err","name","message","abort","Home","Create","BlogDetails","useParams","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMA2BeA,EAtBA,WACb,OACE,sBAAKC,UAAU,SAAf,UACE,sCAEA,sBAAKA,UAAU,QAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CACEA,GAAG,UACHC,MAAO,CACLC,MAAO,QACPC,gBAAiB,UACjBC,aAAc,OALlB,6BCSOC,EApBE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAKzB,OACE,sBAAKR,UAAU,YAAf,UACE,6BAAKQ,IACJD,EAAME,KAAI,SAACC,GAAD,OACT,qBAAKV,UAAU,eAAf,SACE,eAAC,IAAD,CAAMC,GAAE,iBAAYS,EAAKC,IAAzB,UACE,6BAAKD,EAAKF,QACV,4CAAeE,EAAKE,cAHWF,EAAKC,W,QCqFjCE,EA1FE,SAACC,GAAS,IAAD,EACAC,mBAAS,MADT,mBACjBC,EADiB,KACXC,EADW,OAEUF,oBAAS,GAFnB,mBAEjBG,EAFiB,KAENC,EAFM,OAGEJ,mBAAS,MAHX,mBAGjBK,EAHiB,KAGVC,EAHU,KAoFxB,OAnEAC,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBA0D5B,OArDAC,YAAW,WAMTC,MAAMZ,EAAK,CAAEa,OAAQJ,EAAgBI,SAIlCC,MAAK,SAACC,GACL,IAAKA,EAAIC,GACP,MAAMC,MAAM,0CAGd,OADAC,QAAQC,IAAIJ,GACLA,EAAIK,UAGZN,MAAK,SAACZ,GACLC,EAAQD,GACRgB,QAAQC,IAAIjB,GACZG,GAAa,GACbE,EAAS,SAEVc,OAAM,SAACC,GAQW,eAAbA,EAAIC,KACNL,QAAQC,IAAI,kBAEZd,GAAa,GACbE,EAASe,EAAIE,eAGlB,KAcI,WACLf,EAAgBgB,WAKjB,CAACzB,IAEG,CAAEE,OAAME,YAAWE,UC1CboB,EA5CF,WAAO,IAAD,EACyB3B,EACxC,+BADYN,EADG,EACTS,KAAaE,EADJ,EACIA,UAAWE,EADf,EACeA,MAiBhC,OACE,sBAAKpB,UAAU,OAAf,UACGoB,GAAS,8BAAMA,IACfF,GAAa,gDACbX,GAIC,8BACE,cAAC,EAAD,CAAUA,MAAOA,EAAOC,MAAM,oB,OCtBzBiC,EARA,WACb,OACE,qBAAKzC,UAAU,SAAf,SACE,mDCYS0C,EAVK,WAAM,IAEhB/B,EAAOgC,cAAPhC,GACR,OACE,qBAAKX,UAAU,eAAf,SACE,kDAAqBW,EAArB,UCJS,SAASiC,IACtB,OACE,cAAC,IAAD,UACE,sBAAK5C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,UAAf,SAGE,eAAC,IAAD,WAKE,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAGF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,EAAD,MAIF,cAAC,IAAD,CAAOA,KAAK,aAAZ,SACE,cAAC,EAAD,gBCxBdC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACL,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.c46e1b79.chunk.js","sourcesContent":["import { Link } from \"react-router-dom\";\r\n// Link is used to stop the request for a webpage from going to the server\r\n// Instead, the React Router intercepts it injects the necessary code into the DOM\r\n// Underneath, it still uses the anchor <a> tag.\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <h1>Blog</h1>\r\n\r\n      <div className=\"links\">\r\n        <Link to=\"/\">Home</Link>\r\n        <Link\r\n          to=\"/create\"\r\n          style={{\r\n            color: \"white\",\r\n            backgroundColor: \"#f1356d\",\r\n            borderRadius: \"8px\",\r\n          }}\r\n        >\r\n          New Blog\r\n        </Link>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import { Link } from \"react-router-dom\";\r\nconst BlogList = ({ blogs, title }) => {\r\n  // const blogs = props.blogs;\r\n  // const title = props.title;\r\n  // console.log(blogs);\r\n\r\n  return (\r\n    <div className=\"blog-list\">\r\n      <h2>{title}</h2>\r\n      {blogs.map((blog) => (\r\n        <div className=\"blog-preview\" key={blog.id}>\r\n          <Link to={`/blogs/${blog.id}`}>\r\n            <h2>{blog.title}</h2>\r\n            <p>Written by {blog.author}</p>\r\n          </Link>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogList;\r\n","import { useState, useEffect } from \"react\";\r\n\r\n// This is a custom hook that fetches data from server\r\n// NOTE: It is compulsory for a hook to start with 'use'\r\n\r\nconst useFetch = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // useEffect runs every time there is  a re-render,\r\n  // first, when the DOM loads, then everytime the data changes.\r\n\r\n  // But sometimes, we don't want it to run on EVERY render\r\n  // So, we pass a dependency array to useEffect as an argument\r\n\r\n  // If we pass an empty dependency array, useEffect only runs  on the first render\r\n  // and not anymore if we make any changes to the data.\r\n\r\n  // Add to the dependency array any values that when changed,\r\n  // will trigger useEffect\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    // We need to associate this with a fetch request\r\n    // Then we can use the abortController to stop the fetch\r\n    // we will pass this as an argument to the fetch request as shown below.\r\n\r\n    setTimeout(() => {\r\n      // setTimeout of 1 second to simulate the loading tag\r\n      // console.log(\"useEffect ran\");\r\n      // console.log(data);\r\n\r\n      // Cannot use async await here, so we will use .then\r\n      fetch(url, { signal: abortController.signal })\r\n        // res is an object returned by the server with properties like\r\n        // 'ok : true', 'status: 200' etc.\r\n\r\n        .then((res) => {\r\n          if (!res.ok) {\r\n            throw Error(\"Could not fetch data for that resource\");\r\n          }\r\n          console.log(res);\r\n          return res.json();\r\n        })\r\n\r\n        .then((data) => {\r\n          setData(data);\r\n          console.log(data);\r\n          setIsPending(false);\r\n          setError(null);\r\n        })\r\n        .catch((err) => {\r\n          // PSYCH: When a fetch is cancelled, it throws an error\r\n          // Here, when we catch an error, we are updating the state after catch\r\n          // Not necassarily the data, but yes, the state is being updated which still throws the\r\n          // warning at line 66\r\n\r\n          // SOLUTION: If the error is caused by aborted fetch request, do not update state\r\n          // However, if it's a network error or something else, tell the user\r\n          if (err.name === \"AbortError\") {\r\n            console.log(\"Fetch aborted\");\r\n          } else {\r\n            setIsPending(false);\r\n            setError(err.message);\r\n          }\r\n        });\r\n    }, 100);\r\n\r\n    // When we had timeOut limit of 1000ms, and switched\r\n    // quickly from '/create' to '/home', we received a warning\r\n    // \"Can't perform React state update on an unmounted component\"\r\n\r\n    // This is because it tries to update the content of the\r\n    // home component, BUT, the home component is not in the DOM anymore\r\n\r\n    // So, when we click on 'New Blog', we need to cancel the fetch for\r\n    // the 'home' component.\r\n\r\n    // We'll be using a cleanup function in useEffect hook, and an abort controller\r\n\r\n    return () => {\r\n      abortController.abort();\r\n      // This aborts whatever fetch it's associated with i.e., at line 35\r\n\r\n      // console.log(\"cleanup\");\r\n    };\r\n  }, [url]);\r\n\r\n  return { data, isPending, error };\r\n  // Our custom hook returns an object with these 3 values\r\n  // We could also have returned an array, but an\r\n  // object does not depend on order of items like array\r\n};\r\n\r\nexport default useFetch;\r\n","import BlogList from \"./BlogList\";\r\nimport useFetch from \"./useFetch\";\r\n\r\nconst Home = () => {\r\n  const { data: blogs, isPending, error } = useFetch(\r\n    \"http://localhost:8000/blogs\"\r\n  );\r\n  // delete function defined in Home.js instead of BlogList.js\r\n  // so that we can interact with data directly.\r\n  // But, we will need to pass this function as a prop.\r\n\r\n  //  Deprecated after delete functionality moved to db.json\r\n  // const handleDelete = (id) => {\r\n  //   const newBlogs = blogs.filter((blog) => blog.id !== id);\r\n  //   setblogs(newBlogs);\r\n\r\n  // Does not change data.\r\n  // Returns modified array copy.\r\n\r\n  // const [name, setName] = useState(\"Fawaz\");\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      {error && <div>{error}</div>}\r\n      {isPending && <div>Loading. . . </div>}\r\n      {blogs && (\r\n        // blogs && because we are waiting for the blogs to load\r\n        // At the first page load, the blogs = null, so it doesn't evaluate the further expression\r\n\r\n        <div>\r\n          <BlogList blogs={blogs} title=\"All Blogs\" />\r\n\r\n          {/* Demonstration for filter\r\n          <BlogList\r\n            blogs={blogs.filter((blog) => blog.author === \"Brad\")}\r\n            title=\"Brad's Blogs\"\r\n          />\r\n          */}\r\n\r\n          {/* Demonstration for useState */}\r\n          {/* <button onClick={() => setName(\"Omeir\")}>Change Name Below</button>\r\n          <p>{name}</p> */}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","const Create = () => {\r\n  return (\r\n    <div className=\"create\">\r\n      <h2>Add a new blog</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Create;\r\n","// To demonstrate Route parameters so that we can use\r\n// dynamic values to route web pages\r\n\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst BlogDetails = () => {\r\n  // Allows us to grab route parameters to fetch specific blogs\r\n  const { id } = useParams();\r\n  return (\r\n    <div className=\"blog-details\">\r\n      <div>Blog details - {id} </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BlogDetails;\r\n","import Navbar from \"./Navbar\";\nimport Home from \"./Home\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Create from \"./Create\";\nimport BlogDetails from \"./BlogDetails\";\n\nexport default function App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <div className=\"content\">\n          {/* Switch ensures that only one React component shows \n          in the browser at any given time.*/}\n          <Switch>\n            {/* 'exact' to avoid matching '/' as '/create'  \n            If we don't use 'exact', React confuses '/' as '/create' and \n            even if we want to go to '/create' page, \n            it brings us to the homepage*/}\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n\n            <Route path=\"/create\">\n              <Create />\n            </Route>\n\n            {/* Dynamic parameter */}\n            <Route path=\"/blogs/:id\">\n              <BlogDetails />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}